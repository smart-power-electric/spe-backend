/* tslint:disable */
/* eslint-disable */
/**
 * Smart Power Electric API
 * Smart Power Electric API Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApplicationExceptionResponse,
  AssignRoleResponse,
  AssignRoleToUserRequest,
  ChangePasswordRequest,
  LoginRequest,
  LoginResponse,
  RemoveRoleFromUserRequest,
  RoleResponse,
  UserResponse,
} from '../models/index';
import {
    ApplicationExceptionResponseFromJSON,
    ApplicationExceptionResponseToJSON,
    AssignRoleResponseFromJSON,
    AssignRoleResponseToJSON,
    AssignRoleToUserRequestFromJSON,
    AssignRoleToUserRequestToJSON,
    ChangePasswordRequestFromJSON,
    ChangePasswordRequestToJSON,
    LoginRequestFromJSON,
    LoginRequestToJSON,
    LoginResponseFromJSON,
    LoginResponseToJSON,
    RemoveRoleFromUserRequestFromJSON,
    RemoveRoleFromUserRequestToJSON,
    RoleResponseFromJSON,
    RoleResponseToJSON,
    UserResponseFromJSON,
    UserResponseToJSON,
} from '../models/index';

export interface AssignRoleToUserOperationRequest {
    assignRoleToUserRequest: AssignRoleToUserRequest;
}

export interface ChangePasswordOperationRequest {
    changePasswordRequest: ChangePasswordRequest;
}

export interface LoginUserRequest {
    loginRequest: LoginRequest;
}

export interface LogoutUserRequest {
    refreshToken: string;
}

export interface RefreshUserRequest {
    refreshToken: string;
}

export interface RemoveRoleFromUserOperationRequest {
    removeRoleFromUserRequest: RemoveRoleFromUserRequest;
}

/**
 * 
 */
export class AuthenticationApi extends runtime.BaseAPI {

    /**
     * Assign role to user
     */
    async assignRoleToUserRaw(requestParameters: AssignRoleToUserOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AssignRoleResponse>> {
        if (requestParameters['assignRoleToUserRequest'] == null) {
            throw new runtime.RequiredError(
                'assignRoleToUserRequest',
                'Required parameter "assignRoleToUserRequest" was null or undefined when calling assignRoleToUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("AUTH_TOKEN", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/auth/assign-role`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AssignRoleToUserRequestToJSON(requestParameters['assignRoleToUserRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AssignRoleResponseFromJSON(jsonValue));
    }

    /**
     * Assign role to user
     */
    async assignRoleToUser(requestParameters: AssignRoleToUserOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AssignRoleResponse> {
        const response = await this.assignRoleToUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Change user password
     */
    async changePasswordRaw(requestParameters: ChangePasswordOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserResponse>> {
        if (requestParameters['changePasswordRequest'] == null) {
            throw new runtime.RequiredError(
                'changePasswordRequest',
                'Required parameter "changePasswordRequest" was null or undefined when calling changePassword().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("AUTH_TOKEN", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/auth/change-password`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ChangePasswordRequestToJSON(requestParameters['changePasswordRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserResponseFromJSON(jsonValue));
    }

    /**
     * Change user password
     */
    async changePassword(requestParameters: ChangePasswordOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserResponse> {
        const response = await this.changePasswordRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all roles
     */
    async getRolesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<RoleResponse>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("AUTH_TOKEN", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/auth/roles`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RoleResponseFromJSON));
    }

    /**
     * Get all roles
     */
    async getRoles(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<RoleResponse>> {
        const response = await this.getRolesRaw(initOverrides);
        return await response.value();
    }

    /**
     * Login user
     */
    async loginUserRaw(requestParameters: LoginUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LoginResponse>> {
        if (requestParameters['loginRequest'] == null) {
            throw new runtime.RequiredError(
                'loginRequest',
                'Required parameter "loginRequest" was null or undefined when calling loginUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/auth/login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LoginRequestToJSON(requestParameters['loginRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LoginResponseFromJSON(jsonValue));
    }

    /**
     * Login user
     */
    async loginUser(requestParameters: LoginUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LoginResponse> {
        const response = await this.loginUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Logout user
     */
    async logoutUserRaw(requestParameters: LogoutUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['refreshToken'] == null) {
            throw new runtime.RequiredError(
                'refreshToken',
                'Required parameter "refreshToken" was null or undefined when calling logoutUser().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['refreshToken'] != null) {
            queryParameters['refreshToken'] = requestParameters['refreshToken'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("AUTH_TOKEN", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/auth/logout`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Logout user
     */
    async logoutUser(requestParameters: LogoutUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.logoutUserRaw(requestParameters, initOverrides);
    }

    /**
     * Refresh user token
     */
    async refreshUserRaw(requestParameters: RefreshUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LoginResponse>> {
        if (requestParameters['refreshToken'] == null) {
            throw new runtime.RequiredError(
                'refreshToken',
                'Required parameter "refreshToken" was null or undefined when calling refreshUser().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['refreshToken'] != null) {
            queryParameters['refreshToken'] = requestParameters['refreshToken'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("AUTH_TOKEN", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/auth/refresh`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LoginResponseFromJSON(jsonValue));
    }

    /**
     * Refresh user token
     */
    async refreshUser(requestParameters: RefreshUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LoginResponse> {
        const response = await this.refreshUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove role from user
     */
    async removeRoleFromUserRaw(requestParameters: RemoveRoleFromUserOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RemoveRoleFromUserRequest>> {
        if (requestParameters['removeRoleFromUserRequest'] == null) {
            throw new runtime.RequiredError(
                'removeRoleFromUserRequest',
                'Required parameter "removeRoleFromUserRequest" was null or undefined when calling removeRoleFromUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("AUTH_TOKEN", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/auth/remove-role`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RemoveRoleFromUserRequestToJSON(requestParameters['removeRoleFromUserRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RemoveRoleFromUserRequestFromJSON(jsonValue));
    }

    /**
     * Remove role from user
     */
    async removeRoleFromUser(requestParameters: RemoveRoleFromUserOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RemoveRoleFromUserRequest> {
        const response = await this.removeRoleFromUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/* tslint:disable */
/* eslint-disable */
/**
 * Smart Power Electric API
 * Smart Power Electric API Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApplicationExceptionResponse,
  CreateInvoicesRequest,
  InvoicesPaginationResponse,
  InvoicesResponse,
  UpdateInvoicesRequest,
} from '../models/index';
import {
    ApplicationExceptionResponseFromJSON,
    ApplicationExceptionResponseToJSON,
    CreateInvoicesRequestFromJSON,
    CreateInvoicesRequestToJSON,
    InvoicesPaginationResponseFromJSON,
    InvoicesPaginationResponseToJSON,
    InvoicesResponseFromJSON,
    InvoicesResponseToJSON,
    UpdateInvoicesRequestFromJSON,
    UpdateInvoicesRequestToJSON,
} from '../models/index';

export interface CreateInvoiceRequest {
    createInvoicesRequest: CreateInvoicesRequest;
}

export interface FindAllInvoiceRequest {
    limit?: number;
    offset?: number;
    stageId?: string;
}

export interface FindOneInvoiceRequest {
    id: string;
}

export interface RemoveInvoiceRequest {
    id: string;
}

export interface UpdateInvoiceRequest {
    id: string;
    updateInvoicesRequest: UpdateInvoicesRequest;
}

/**
 * 
 */
export class InvoicesApi extends runtime.BaseAPI {

    /**
     * Create a new invoices
     */
    async createInvoiceRaw(requestParameters: CreateInvoiceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InvoicesResponse>> {
        if (requestParameters['createInvoicesRequest'] == null) {
            throw new runtime.RequiredError(
                'createInvoicesRequest',
                'Required parameter "createInvoicesRequest" was null or undefined when calling createInvoice().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/invoices`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateInvoicesRequestToJSON(requestParameters['createInvoicesRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InvoicesResponseFromJSON(jsonValue));
    }

    /**
     * Create a new invoices
     */
    async createInvoice(requestParameters: CreateInvoiceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InvoicesResponse> {
        const response = await this.createInvoiceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all invoicess
     */
    async findAllInvoiceRaw(requestParameters: FindAllInvoiceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InvoicesPaginationResponse>> {
        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['stageId'] != null) {
            queryParameters['stageId'] = requestParameters['stageId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/invoices`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InvoicesPaginationResponseFromJSON(jsonValue));
    }

    /**
     * Get all invoicess
     */
    async findAllInvoice(requestParameters: FindAllInvoiceRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InvoicesPaginationResponse> {
        const response = await this.findAllInvoiceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get invoices by id
     */
    async findOneInvoiceRaw(requestParameters: FindOneInvoiceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InvoicesResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling findOneInvoice().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/invoices/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InvoicesResponseFromJSON(jsonValue));
    }

    /**
     * Get invoices by id
     */
    async findOneInvoice(requestParameters: FindOneInvoiceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InvoicesResponse> {
        const response = await this.findOneInvoiceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async removeInvoiceRaw(requestParameters: RemoveInvoiceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling removeInvoice().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/invoices/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async removeInvoice(requestParameters: RemoveInvoiceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.removeInvoiceRaw(requestParameters, initOverrides);
    }

    /**
     */
    async updateInvoiceRaw(requestParameters: UpdateInvoiceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InvoicesResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateInvoice().'
            );
        }

        if (requestParameters['updateInvoicesRequest'] == null) {
            throw new runtime.RequiredError(
                'updateInvoicesRequest',
                'Required parameter "updateInvoicesRequest" was null or undefined when calling updateInvoice().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/invoices/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateInvoicesRequestToJSON(requestParameters['updateInvoicesRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InvoicesResponseFromJSON(jsonValue));
    }

    /**
     */
    async updateInvoice(requestParameters: UpdateInvoiceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InvoicesResponse> {
        const response = await this.updateInvoiceRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

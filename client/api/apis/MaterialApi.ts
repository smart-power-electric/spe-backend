/* tslint:disable */
/* eslint-disable */
/**
 * Smart Power Electric API
 * Smart Power Electric API Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApplicationExceptionResponse,
  CreateMaterialRequest,
  MaterialPaginationResponse,
  MaterialResponse,
  UpdateMaterialRequest,
} from '../models/index';
import {
    ApplicationExceptionResponseFromJSON,
    ApplicationExceptionResponseToJSON,
    CreateMaterialRequestFromJSON,
    CreateMaterialRequestToJSON,
    MaterialPaginationResponseFromJSON,
    MaterialPaginationResponseToJSON,
    MaterialResponseFromJSON,
    MaterialResponseToJSON,
    UpdateMaterialRequestFromJSON,
    UpdateMaterialRequestToJSON,
} from '../models/index';

export interface CreateMaterialOperationRequest {
    createMaterialRequest: CreateMaterialRequest;
}

export interface FindAllMaterialRequest {
    limit?: number;
    offset?: number;
    sortOrder?: FindAllMaterialSortOrderEnum;
    name?: string;
    sortField?: FindAllMaterialSortFieldEnum;
}

export interface FindOneMaterialRequest {
    id: string;
}

export interface RemoveMaterialRequest {
    id: string;
}

export interface UpdateMaterialOperationRequest {
    id: string;
    updateMaterialRequest: UpdateMaterialRequest;
}

/**
 * 
 */
export class MaterialApi extends runtime.BaseAPI {

    /**
     * Create a new material
     */
    async createMaterialRaw(requestParameters: CreateMaterialOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MaterialResponse>> {
        if (requestParameters['createMaterialRequest'] == null) {
            throw new runtime.RequiredError(
                'createMaterialRequest',
                'Required parameter "createMaterialRequest" was null or undefined when calling createMaterial().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/material`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateMaterialRequestToJSON(requestParameters['createMaterialRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MaterialResponseFromJSON(jsonValue));
    }

    /**
     * Create a new material
     */
    async createMaterial(requestParameters: CreateMaterialOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MaterialResponse> {
        const response = await this.createMaterialRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all materials
     */
    async findAllMaterialRaw(requestParameters: FindAllMaterialRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MaterialPaginationResponse>> {
        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['sortOrder'] != null) {
            queryParameters['sortOrder'] = requestParameters['sortOrder'];
        }

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        if (requestParameters['sortField'] != null) {
            queryParameters['sortField'] = requestParameters['sortField'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/material`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MaterialPaginationResponseFromJSON(jsonValue));
    }

    /**
     * Get all materials
     */
    async findAllMaterial(requestParameters: FindAllMaterialRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MaterialPaginationResponse> {
        const response = await this.findAllMaterialRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get material by id
     */
    async findOneMaterialRaw(requestParameters: FindOneMaterialRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MaterialResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling findOneMaterial().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/material/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MaterialResponseFromJSON(jsonValue));
    }

    /**
     * Get material by id
     */
    async findOneMaterial(requestParameters: FindOneMaterialRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MaterialResponse> {
        const response = await this.findOneMaterialRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async removeMaterialRaw(requestParameters: RemoveMaterialRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling removeMaterial().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/material/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async removeMaterial(requestParameters: RemoveMaterialRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.removeMaterialRaw(requestParameters, initOverrides);
    }

    /**
     */
    async updateMaterialRaw(requestParameters: UpdateMaterialOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MaterialResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateMaterial().'
            );
        }

        if (requestParameters['updateMaterialRequest'] == null) {
            throw new runtime.RequiredError(
                'updateMaterialRequest',
                'Required parameter "updateMaterialRequest" was null or undefined when calling updateMaterial().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/material/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateMaterialRequestToJSON(requestParameters['updateMaterialRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MaterialResponseFromJSON(jsonValue));
    }

    /**
     */
    async updateMaterial(requestParameters: UpdateMaterialOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MaterialResponse> {
        const response = await this.updateMaterialRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const FindAllMaterialSortOrderEnum = {
    Asc: 'ASC',
    Desc: 'DESC'
} as const;
export type FindAllMaterialSortOrderEnum = typeof FindAllMaterialSortOrderEnum[keyof typeof FindAllMaterialSortOrderEnum];
/**
 * @export
 */
export const FindAllMaterialSortFieldEnum = {
    Id: 'id',
    Name: 'name',
    UnitCost: 'unitCost',
    CreatedAt: 'createdAt',
    UpdatedAt: 'updatedAt'
} as const;
export type FindAllMaterialSortFieldEnum = typeof FindAllMaterialSortFieldEnum[keyof typeof FindAllMaterialSortFieldEnum];

/* tslint:disable */
/* eslint-disable */
/**
 * Smart Power Electric API
 * Smart Power Electric API Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApplicationExceptionResponse,
  CreateNotificationsRequest,
  NotificationsPaginationResponse,
  NotificationsResponse,
  UpdateNotificationsRequest,
} from '../models/index';
import {
    ApplicationExceptionResponseFromJSON,
    ApplicationExceptionResponseToJSON,
    CreateNotificationsRequestFromJSON,
    CreateNotificationsRequestToJSON,
    NotificationsPaginationResponseFromJSON,
    NotificationsPaginationResponseToJSON,
    NotificationsResponseFromJSON,
    NotificationsResponseToJSON,
    UpdateNotificationsRequestFromJSON,
    UpdateNotificationsRequestToJSON,
} from '../models/index';

export interface CreateNotificationRequest {
    createNotificationsRequest: CreateNotificationsRequest;
}

export interface FindAllNotificationRequest {
    limit?: number;
    offset?: number;
    clientId?: string;
    invoiceId?: string;
}

export interface FindOneNotificationRequest {
    id: string;
}

export interface RemoveNotificationRequest {
    id: string;
}

export interface UpdateNotificationRequest {
    id: string;
    updateNotificationsRequest: UpdateNotificationsRequest;
}

/**
 * 
 */
export class NotificationsApi extends runtime.BaseAPI {

    /**
     * Create a new notifications
     */
    async createNotificationRaw(requestParameters: CreateNotificationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NotificationsResponse>> {
        if (requestParameters['createNotificationsRequest'] == null) {
            throw new runtime.RequiredError(
                'createNotificationsRequest',
                'Required parameter "createNotificationsRequest" was null or undefined when calling createNotification().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/notifications`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateNotificationsRequestToJSON(requestParameters['createNotificationsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NotificationsResponseFromJSON(jsonValue));
    }

    /**
     * Create a new notifications
     */
    async createNotification(requestParameters: CreateNotificationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NotificationsResponse> {
        const response = await this.createNotificationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all notificationss
     */
    async findAllNotificationRaw(requestParameters: FindAllNotificationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NotificationsPaginationResponse>> {
        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['clientId'] != null) {
            queryParameters['clientId'] = requestParameters['clientId'];
        }

        if (requestParameters['invoiceId'] != null) {
            queryParameters['invoiceId'] = requestParameters['invoiceId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/notifications`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NotificationsPaginationResponseFromJSON(jsonValue));
    }

    /**
     * Get all notificationss
     */
    async findAllNotification(requestParameters: FindAllNotificationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NotificationsPaginationResponse> {
        const response = await this.findAllNotificationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get notifications by id
     */
    async findOneNotificationRaw(requestParameters: FindOneNotificationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NotificationsResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling findOneNotification().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/notifications/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NotificationsResponseFromJSON(jsonValue));
    }

    /**
     * Get notifications by id
     */
    async findOneNotification(requestParameters: FindOneNotificationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NotificationsResponse> {
        const response = await this.findOneNotificationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async removeNotificationRaw(requestParameters: RemoveNotificationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling removeNotification().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/notifications/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async removeNotification(requestParameters: RemoveNotificationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.removeNotificationRaw(requestParameters, initOverrides);
    }

    /**
     */
    async updateNotificationRaw(requestParameters: UpdateNotificationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NotificationsResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateNotification().'
            );
        }

        if (requestParameters['updateNotificationsRequest'] == null) {
            throw new runtime.RequiredError(
                'updateNotificationsRequest',
                'Required parameter "updateNotificationsRequest" was null or undefined when calling updateNotification().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/notifications/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateNotificationsRequestToJSON(requestParameters['updateNotificationsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NotificationsResponseFromJSON(jsonValue));
    }

    /**
     */
    async updateNotification(requestParameters: UpdateNotificationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NotificationsResponse> {
        const response = await this.updateNotificationRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

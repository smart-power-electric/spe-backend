/* tslint:disable */
/* eslint-disable */
/**
 * Smart Power Electric API
 * Smart Power Electric API Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApplicationExceptionResponse,
  CreateProjectRequest,
  ProjectPaginationResponse,
  ProjectResponse,
  StageResponse,
  UpdateProjectRequest,
  UpsertStageRequest,
} from '../models/index';
import {
    ApplicationExceptionResponseFromJSON,
    ApplicationExceptionResponseToJSON,
    CreateProjectRequestFromJSON,
    CreateProjectRequestToJSON,
    ProjectPaginationResponseFromJSON,
    ProjectPaginationResponseToJSON,
    ProjectResponseFromJSON,
    ProjectResponseToJSON,
    StageResponseFromJSON,
    StageResponseToJSON,
    UpdateProjectRequestFromJSON,
    UpdateProjectRequestToJSON,
    UpsertStageRequestFromJSON,
    UpsertStageRequestToJSON,
} from '../models/index';

export interface CreateProjectOperationRequest {
    createProjectRequest: CreateProjectRequest;
}

export interface FindAllProjectRequest {
    limit?: number;
    offset?: number;
    clientId?: string;
    sortOrder?: FindAllProjectSortOrderEnum;
    sortField?: FindAllProjectSortFieldEnum;
}

export interface FindOneProjectRequest {
    id: string;
}

export interface RemoveProjectRequest {
    id: string;
}

export interface UpdateBulkStageRequest {
    id: string;
    upsertStageRequest: Array<UpsertStageRequest>;
}

export interface UpdateProjectOperationRequest {
    id: string;
    updateProjectRequest: UpdateProjectRequest;
}

/**
 * 
 */
export class ProjectApi extends runtime.BaseAPI {

    /**
     * Create a new project
     */
    async createProjectRaw(requestParameters: CreateProjectOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProjectResponse>> {
        if (requestParameters['createProjectRequest'] == null) {
            throw new runtime.RequiredError(
                'createProjectRequest',
                'Required parameter "createProjectRequest" was null or undefined when calling createProject().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/project`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateProjectRequestToJSON(requestParameters['createProjectRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectResponseFromJSON(jsonValue));
    }

    /**
     * Create a new project
     */
    async createProject(requestParameters: CreateProjectOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProjectResponse> {
        const response = await this.createProjectRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all projects
     */
    async findAllProjectRaw(requestParameters: FindAllProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProjectPaginationResponse>> {
        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['clientId'] != null) {
            queryParameters['clientId'] = requestParameters['clientId'];
        }

        if (requestParameters['sortOrder'] != null) {
            queryParameters['sortOrder'] = requestParameters['sortOrder'];
        }

        if (requestParameters['sortField'] != null) {
            queryParameters['sortField'] = requestParameters['sortField'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/project`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectPaginationResponseFromJSON(jsonValue));
    }

    /**
     * Get all projects
     */
    async findAllProject(requestParameters: FindAllProjectRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProjectPaginationResponse> {
        const response = await this.findAllProjectRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get project by id
     */
    async findOneProjectRaw(requestParameters: FindOneProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProjectResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling findOneProject().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/project/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectResponseFromJSON(jsonValue));
    }

    /**
     * Get project by id
     */
    async findOneProject(requestParameters: FindOneProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProjectResponse> {
        const response = await this.findOneProjectRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async removeProjectRaw(requestParameters: RemoveProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling removeProject().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/project/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async removeProject(requestParameters: RemoveProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.removeProjectRaw(requestParameters, initOverrides);
    }

    /**
     */
    async updateBulkStageRaw(requestParameters: UpdateBulkStageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<StageResponse>>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateBulkStage().'
            );
        }

        if (requestParameters['upsertStageRequest'] == null) {
            throw new runtime.RequiredError(
                'upsertStageRequest',
                'Required parameter "upsertStageRequest" was null or undefined when calling updateBulkStage().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/project/{id}/stages/updates`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['upsertStageRequest']!.map(UpsertStageRequestToJSON),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(StageResponseFromJSON));
    }

    /**
     */
    async updateBulkStage(requestParameters: UpdateBulkStageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<StageResponse>> {
        const response = await this.updateBulkStageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateProjectRaw(requestParameters: UpdateProjectOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProjectResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateProject().'
            );
        }

        if (requestParameters['updateProjectRequest'] == null) {
            throw new runtime.RequiredError(
                'updateProjectRequest',
                'Required parameter "updateProjectRequest" was null or undefined when calling updateProject().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/project/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateProjectRequestToJSON(requestParameters['updateProjectRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectResponseFromJSON(jsonValue));
    }

    /**
     */
    async updateProject(requestParameters: UpdateProjectOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProjectResponse> {
        const response = await this.updateProjectRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const FindAllProjectSortOrderEnum = {
    Asc: 'ASC',
    Desc: 'DESC'
} as const;
export type FindAllProjectSortOrderEnum = typeof FindAllProjectSortOrderEnum[keyof typeof FindAllProjectSortOrderEnum];
/**
 * @export
 */
export const FindAllProjectSortFieldEnum = {
    Id: 'id',
    ClientId: 'clientId',
    Name: 'name',
    Description: 'description',
    Location: 'location',
    StartDate: 'startDate',
    EndDate: 'endDate',
    CreatedAt: 'createdAt',
    UpdatedAt: 'updatedAt'
} as const;
export type FindAllProjectSortFieldEnum = typeof FindAllProjectSortFieldEnum[keyof typeof FindAllProjectSortFieldEnum];

/* tslint:disable */
/* eslint-disable */
/**
 * Smart Power Electric API
 * Smart Power Electric API Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApplicationExceptionResponse,
  CreateProjectQuotationRequest,
  ProjectQuotationResponse,
  UpdateProjectQuotationRequest,
} from '../models/index';
import {
    ApplicationExceptionResponseFromJSON,
    ApplicationExceptionResponseToJSON,
    CreateProjectQuotationRequestFromJSON,
    CreateProjectQuotationRequestToJSON,
    ProjectQuotationResponseFromJSON,
    ProjectQuotationResponseToJSON,
    UpdateProjectQuotationRequestFromJSON,
    UpdateProjectQuotationRequestToJSON,
} from '../models/index';

export interface CreateProjectQuotationOperationRequest {
    createProjectQuotationRequest: CreateProjectQuotationRequest;
}

export interface FindAllProjectQuotationRequest {
    limit?: number;
    offset?: number;
    projectId?: string;
    materialId?: string;
    serviceId?: string;
}

export interface FindOneProjectQuotationRequest {
    id: number;
}

export interface RemoveProjectQuotationRequest {
    id: number;
}

export interface UpdateProjectQuotationOperationRequest {
    id: number;
    updateProjectQuotationRequest: UpdateProjectQuotationRequest;
}

/**
 * 
 */
export class ProjectQuotationApi extends runtime.BaseAPI {

    /**
     * Create a new projectQuotation
     */
    async createProjectQuotationRaw(requestParameters: CreateProjectQuotationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProjectQuotationResponse>> {
        if (requestParameters['createProjectQuotationRequest'] == null) {
            throw new runtime.RequiredError(
                'createProjectQuotationRequest',
                'Required parameter "createProjectQuotationRequest" was null or undefined when calling createProjectQuotation().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/project-quotation`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateProjectQuotationRequestToJSON(requestParameters['createProjectQuotationRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectQuotationResponseFromJSON(jsonValue));
    }

    /**
     * Create a new projectQuotation
     */
    async createProjectQuotation(requestParameters: CreateProjectQuotationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProjectQuotationResponse> {
        const response = await this.createProjectQuotationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all projectQuotations
     */
    async findAllProjectQuotationRaw(requestParameters: FindAllProjectQuotationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ProjectQuotationResponse>>> {
        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['projectId'] != null) {
            queryParameters['projectId'] = requestParameters['projectId'];
        }

        if (requestParameters['materialId'] != null) {
            queryParameters['materialId'] = requestParameters['materialId'];
        }

        if (requestParameters['serviceId'] != null) {
            queryParameters['serviceId'] = requestParameters['serviceId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/project-quotation`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ProjectQuotationResponseFromJSON));
    }

    /**
     * Get all projectQuotations
     */
    async findAllProjectQuotation(requestParameters: FindAllProjectQuotationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ProjectQuotationResponse>> {
        const response = await this.findAllProjectQuotationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get projectQuotation by id
     */
    async findOneProjectQuotationRaw(requestParameters: FindOneProjectQuotationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProjectQuotationResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling findOneProjectQuotation().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/project-quotation/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectQuotationResponseFromJSON(jsonValue));
    }

    /**
     * Get projectQuotation by id
     */
    async findOneProjectQuotation(requestParameters: FindOneProjectQuotationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProjectQuotationResponse> {
        const response = await this.findOneProjectQuotationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async removeProjectQuotationRaw(requestParameters: RemoveProjectQuotationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling removeProjectQuotation().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/project-quotation/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async removeProjectQuotation(requestParameters: RemoveProjectQuotationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.removeProjectQuotationRaw(requestParameters, initOverrides);
    }

    /**
     */
    async updateProjectQuotationRaw(requestParameters: UpdateProjectQuotationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProjectQuotationResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateProjectQuotation().'
            );
        }

        if (requestParameters['updateProjectQuotationRequest'] == null) {
            throw new runtime.RequiredError(
                'updateProjectQuotationRequest',
                'Required parameter "updateProjectQuotationRequest" was null or undefined when calling updateProjectQuotation().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/project-quotation/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateProjectQuotationRequestToJSON(requestParameters['updateProjectQuotationRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectQuotationResponseFromJSON(jsonValue));
    }

    /**
     */
    async updateProjectQuotation(requestParameters: UpdateProjectQuotationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProjectQuotationResponse> {
        const response = await this.updateProjectQuotationRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

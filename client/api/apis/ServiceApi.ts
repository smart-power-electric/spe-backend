/* tslint:disable */
/* eslint-disable */
/**
 * Smart Power Electric API
 * Smart Power Electric API Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApplicationExceptionResponse,
  CreateServiceRequest,
  ServiceResponse,
  UpdateServiceRequest,
} from '../models/index';
import {
    ApplicationExceptionResponseFromJSON,
    ApplicationExceptionResponseToJSON,
    CreateServiceRequestFromJSON,
    CreateServiceRequestToJSON,
    ServiceResponseFromJSON,
    ServiceResponseToJSON,
    UpdateServiceRequestFromJSON,
    UpdateServiceRequestToJSON,
} from '../models/index';

export interface CreateServiceOperationRequest {
    createServiceRequest: CreateServiceRequest;
}

export interface FindAllServiceRequest {
    limit?: number;
    offset?: number;
    name?: string;
}

export interface FindOneServiceRequest {
    id: number;
}

export interface RemoveServiceRequest {
    id: number;
}

export interface UpdateServiceOperationRequest {
    id: number;
    updateServiceRequest: UpdateServiceRequest;
}

/**
 * 
 */
export class ServiceApi extends runtime.BaseAPI {

    /**
     * Create a new service
     */
    async createServiceRaw(requestParameters: CreateServiceOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ServiceResponse>> {
        if (requestParameters['createServiceRequest'] == null) {
            throw new runtime.RequiredError(
                'createServiceRequest',
                'Required parameter "createServiceRequest" was null or undefined when calling createService().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/service`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateServiceRequestToJSON(requestParameters['createServiceRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ServiceResponseFromJSON(jsonValue));
    }

    /**
     * Create a new service
     */
    async createService(requestParameters: CreateServiceOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ServiceResponse> {
        const response = await this.createServiceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all services
     */
    async findAllServiceRaw(requestParameters: FindAllServiceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ServiceResponse>>> {
        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/service`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ServiceResponseFromJSON));
    }

    /**
     * Get all services
     */
    async findAllService(requestParameters: FindAllServiceRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ServiceResponse>> {
        const response = await this.findAllServiceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get service by id
     */
    async findOneServiceRaw(requestParameters: FindOneServiceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ServiceResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling findOneService().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/service/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ServiceResponseFromJSON(jsonValue));
    }

    /**
     * Get service by id
     */
    async findOneService(requestParameters: FindOneServiceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ServiceResponse> {
        const response = await this.findOneServiceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async removeServiceRaw(requestParameters: RemoveServiceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling removeService().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/service/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async removeService(requestParameters: RemoveServiceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.removeServiceRaw(requestParameters, initOverrides);
    }

    /**
     */
    async updateServiceRaw(requestParameters: UpdateServiceOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ServiceResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateService().'
            );
        }

        if (requestParameters['updateServiceRequest'] == null) {
            throw new runtime.RequiredError(
                'updateServiceRequest',
                'Required parameter "updateServiceRequest" was null or undefined when calling updateService().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/service/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateServiceRequestToJSON(requestParameters['updateServiceRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ServiceResponseFromJSON(jsonValue));
    }

    /**
     */
    async updateService(requestParameters: UpdateServiceOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ServiceResponse> {
        const response = await this.updateServiceRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/* tslint:disable */
/* eslint-disable */
/**
 * Smart Power Electric API
 * Smart Power Electric API Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApplicationExceptionResponse,
  CreateServiceSheetsRequest,
  ServiceSheetsPaginationResponse,
  ServiceSheetsResponse,
  UpdateServiceSheetsRequest,
} from '../models/index';
import {
    ApplicationExceptionResponseFromJSON,
    ApplicationExceptionResponseToJSON,
    CreateServiceSheetsRequestFromJSON,
    CreateServiceSheetsRequestToJSON,
    ServiceSheetsPaginationResponseFromJSON,
    ServiceSheetsPaginationResponseToJSON,
    ServiceSheetsResponseFromJSON,
    ServiceSheetsResponseToJSON,
    UpdateServiceSheetsRequestFromJSON,
    UpdateServiceSheetsRequestToJSON,
} from '../models/index';

export interface CreateServiceSheetsOperationRequest {
    createServiceSheetsRequest: CreateServiceSheetsRequest;
}

export interface FindAllServiceSheetsRequest {
    limit?: number;
    offset?: number;
    workerId?: string;
    projectId?: string;
}

export interface FindOneServiceSheetsRequest {
    id: string;
}

export interface RemoveServiceSheetsRequest {
    id: string;
}

export interface UpdateServiceSheetsOperationRequest {
    id: string;
    updateServiceSheetsRequest: UpdateServiceSheetsRequest;
}

/**
 * 
 */
export class ServiceSheetsApi extends runtime.BaseAPI {

    /**
     * Create a new serviceSheets
     */
    async createServiceSheetsRaw(requestParameters: CreateServiceSheetsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ServiceSheetsResponse>> {
        if (requestParameters['createServiceSheetsRequest'] == null) {
            throw new runtime.RequiredError(
                'createServiceSheetsRequest',
                'Required parameter "createServiceSheetsRequest" was null or undefined when calling createServiceSheets().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/serviceSheets`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateServiceSheetsRequestToJSON(requestParameters['createServiceSheetsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ServiceSheetsResponseFromJSON(jsonValue));
    }

    /**
     * Create a new serviceSheets
     */
    async createServiceSheets(requestParameters: CreateServiceSheetsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ServiceSheetsResponse> {
        const response = await this.createServiceSheetsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all serviceSheetss
     */
    async findAllServiceSheetsRaw(requestParameters: FindAllServiceSheetsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ServiceSheetsPaginationResponse>> {
        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['workerId'] != null) {
            queryParameters['workerId'] = requestParameters['workerId'];
        }

        if (requestParameters['projectId'] != null) {
            queryParameters['projectId'] = requestParameters['projectId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/serviceSheets`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ServiceSheetsPaginationResponseFromJSON(jsonValue));
    }

    /**
     * Get all serviceSheetss
     */
    async findAllServiceSheets(requestParameters: FindAllServiceSheetsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ServiceSheetsPaginationResponse> {
        const response = await this.findAllServiceSheetsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get serviceSheets by id
     */
    async findOneServiceSheetsRaw(requestParameters: FindOneServiceSheetsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ServiceSheetsResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling findOneServiceSheets().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/serviceSheets/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ServiceSheetsResponseFromJSON(jsonValue));
    }

    /**
     * Get serviceSheets by id
     */
    async findOneServiceSheets(requestParameters: FindOneServiceSheetsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ServiceSheetsResponse> {
        const response = await this.findOneServiceSheetsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async removeServiceSheetsRaw(requestParameters: RemoveServiceSheetsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling removeServiceSheets().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/serviceSheets/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async removeServiceSheets(requestParameters: RemoveServiceSheetsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.removeServiceSheetsRaw(requestParameters, initOverrides);
    }

    /**
     */
    async updateServiceSheetsRaw(requestParameters: UpdateServiceSheetsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ServiceSheetsResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateServiceSheets().'
            );
        }

        if (requestParameters['updateServiceSheetsRequest'] == null) {
            throw new runtime.RequiredError(
                'updateServiceSheetsRequest',
                'Required parameter "updateServiceSheetsRequest" was null or undefined when calling updateServiceSheets().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/serviceSheets/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateServiceSheetsRequestToJSON(requestParameters['updateServiceSheetsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ServiceSheetsResponseFromJSON(jsonValue));
    }

    /**
     */
    async updateServiceSheets(requestParameters: UpdateServiceSheetsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ServiceSheetsResponse> {
        const response = await this.updateServiceSheetsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

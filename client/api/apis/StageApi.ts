/* tslint:disable */
/* eslint-disable */
/**
 * Smart Power Electric API
 * Smart Power Electric API Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApplicationExceptionResponse,
  CreateStageRequest,
  StagePaginationResponse,
  StageResponse,
  UpdateStageRequest,
} from '../models/index';
import {
    ApplicationExceptionResponseFromJSON,
    ApplicationExceptionResponseToJSON,
    CreateStageRequestFromJSON,
    CreateStageRequestToJSON,
    StagePaginationResponseFromJSON,
    StagePaginationResponseToJSON,
    StageResponseFromJSON,
    StageResponseToJSON,
    UpdateStageRequestFromJSON,
    UpdateStageRequestToJSON,
} from '../models/index';

export interface CreateStageOperationRequest {
    createStageRequest: CreateStageRequest;
}

export interface FindAllStageRequest {
    limit?: number;
    offset?: number;
    projectId?: string;
    name?: string;
}

export interface FindOneStageRequest {
    id: string;
}

export interface RemoveStageRequest {
    id: string;
}

export interface UpdateStageOperationRequest {
    id: string;
    updateStageRequest: UpdateStageRequest;
}

/**
 * 
 */
export class StageApi extends runtime.BaseAPI {

    /**
     * Create a new stage
     */
    async createStageRaw(requestParameters: CreateStageOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StageResponse>> {
        if (requestParameters['createStageRequest'] == null) {
            throw new runtime.RequiredError(
                'createStageRequest',
                'Required parameter "createStageRequest" was null or undefined when calling createStage().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/stage`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateStageRequestToJSON(requestParameters['createStageRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StageResponseFromJSON(jsonValue));
    }

    /**
     * Create a new stage
     */
    async createStage(requestParameters: CreateStageOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StageResponse> {
        const response = await this.createStageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all stages
     */
    async findAllStageRaw(requestParameters: FindAllStageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StagePaginationResponse>> {
        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['projectId'] != null) {
            queryParameters['projectId'] = requestParameters['projectId'];
        }

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/stage`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StagePaginationResponseFromJSON(jsonValue));
    }

    /**
     * Get all stages
     */
    async findAllStage(requestParameters: FindAllStageRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StagePaginationResponse> {
        const response = await this.findAllStageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get stage by id
     */
    async findOneStageRaw(requestParameters: FindOneStageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StageResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling findOneStage().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/stage/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StageResponseFromJSON(jsonValue));
    }

    /**
     * Get stage by id
     */
    async findOneStage(requestParameters: FindOneStageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StageResponse> {
        const response = await this.findOneStageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async removeStageRaw(requestParameters: RemoveStageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling removeStage().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/stage/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async removeStage(requestParameters: RemoveStageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.removeStageRaw(requestParameters, initOverrides);
    }

    /**
     */
    async updateStageRaw(requestParameters: UpdateStageOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StageResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateStage().'
            );
        }

        if (requestParameters['updateStageRequest'] == null) {
            throw new runtime.RequiredError(
                'updateStageRequest',
                'Required parameter "updateStageRequest" was null or undefined when calling updateStage().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/stage/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateStageRequestToJSON(requestParameters['updateStageRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StageResponseFromJSON(jsonValue));
    }

    /**
     */
    async updateStage(requestParameters: UpdateStageOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StageResponse> {
        const response = await this.updateStageRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/* tslint:disable */
/* eslint-disable */
/**
 * Smart Power Electric API
 * Smart Power Electric API Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApplicationExceptionResponse,
  CreateWorkerRequest,
  UpdateWorkerRequest,
  WorkerResponse,
} from '../models/index';
import {
    ApplicationExceptionResponseFromJSON,
    ApplicationExceptionResponseToJSON,
    CreateWorkerRequestFromJSON,
    CreateWorkerRequestToJSON,
    UpdateWorkerRequestFromJSON,
    UpdateWorkerRequestToJSON,
    WorkerResponseFromJSON,
    WorkerResponseToJSON,
} from '../models/index';

export interface CreateWorkerOperationRequest {
    createWorkerRequest: CreateWorkerRequest;
}

export interface FindAllWorkerRequest {
    limit?: number;
    offset?: number;
    name?: string;
}

export interface FindOneWorkerRequest {
    id: number;
}

export interface RemoveWorkerRequest {
    id: number;
}

export interface UpdateWorkerOperationRequest {
    id: number;
    updateWorkerRequest: UpdateWorkerRequest;
}

/**
 * 
 */
export class WorkerApi extends runtime.BaseAPI {

    /**
     * Create a new worker
     */
    async createWorkerRaw(requestParameters: CreateWorkerOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkerResponse>> {
        if (requestParameters['createWorkerRequest'] == null) {
            throw new runtime.RequiredError(
                'createWorkerRequest',
                'Required parameter "createWorkerRequest" was null or undefined when calling createWorker().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/worker`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateWorkerRequestToJSON(requestParameters['createWorkerRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkerResponseFromJSON(jsonValue));
    }

    /**
     * Create a new worker
     */
    async createWorker(requestParameters: CreateWorkerOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkerResponse> {
        const response = await this.createWorkerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all workers
     */
    async findAllWorkerRaw(requestParameters: FindAllWorkerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<WorkerResponse>>> {
        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/worker`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(WorkerResponseFromJSON));
    }

    /**
     * Get all workers
     */
    async findAllWorker(requestParameters: FindAllWorkerRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<WorkerResponse>> {
        const response = await this.findAllWorkerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get worker by id
     */
    async findOneWorkerRaw(requestParameters: FindOneWorkerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkerResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling findOneWorker().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/worker/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkerResponseFromJSON(jsonValue));
    }

    /**
     * Get worker by id
     */
    async findOneWorker(requestParameters: FindOneWorkerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkerResponse> {
        const response = await this.findOneWorkerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async removeWorkerRaw(requestParameters: RemoveWorkerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling removeWorker().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/worker/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async removeWorker(requestParameters: RemoveWorkerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.removeWorkerRaw(requestParameters, initOverrides);
    }

    /**
     */
    async updateWorkerRaw(requestParameters: UpdateWorkerOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkerResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateWorker().'
            );
        }

        if (requestParameters['updateWorkerRequest'] == null) {
            throw new runtime.RequiredError(
                'updateWorkerRequest',
                'Required parameter "updateWorkerRequest" was null or undefined when calling updateWorker().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/worker/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateWorkerRequestToJSON(requestParameters['updateWorkerRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkerResponseFromJSON(jsonValue));
    }

    /**
     */
    async updateWorker(requestParameters: UpdateWorkerOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkerResponse> {
        const response = await this.updateWorkerRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

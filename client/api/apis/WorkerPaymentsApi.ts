/* tslint:disable */
/* eslint-disable */
/**
 * Smart Power Electric API
 * Smart Power Electric API Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApplicationExceptionResponse,
  CreateWorkerPaymentsRequest,
  UpdateWorkerPaymentsRequest,
  WorkerPaymentsPaginationResponse,
  WorkerPaymentsResponse,
} from '../models/index';
import {
    ApplicationExceptionResponseFromJSON,
    ApplicationExceptionResponseToJSON,
    CreateWorkerPaymentsRequestFromJSON,
    CreateWorkerPaymentsRequestToJSON,
    UpdateWorkerPaymentsRequestFromJSON,
    UpdateWorkerPaymentsRequestToJSON,
    WorkerPaymentsPaginationResponseFromJSON,
    WorkerPaymentsPaginationResponseToJSON,
    WorkerPaymentsResponseFromJSON,
    WorkerPaymentsResponseToJSON,
} from '../models/index';

export interface CreateWorkerPaymentsOperationRequest {
    createWorkerPaymentsRequest: CreateWorkerPaymentsRequest;
}

export interface FindAllWorkerPaymentsRequest {
    limit?: number;
    offset?: number;
    workerId?: string;
    serviceSheetId?: string;
    sortOrder?: FindAllWorkerPaymentsSortOrderEnum;
    sortField?: FindAllWorkerPaymentsSortFieldEnum;
}

export interface FindOneWorkerPaymentsRequest {
    id: string;
}

export interface RemoveWorkerPaymentsRequest {
    id: string;
}

export interface UpdateWorkerPaymentsOperationRequest {
    id: string;
    updateWorkerPaymentsRequest: UpdateWorkerPaymentsRequest;
}

/**
 * 
 */
export class WorkerPaymentsApi extends runtime.BaseAPI {

    /**
     * Create a new workerPayments
     */
    async createWorkerPaymentsRaw(requestParameters: CreateWorkerPaymentsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkerPaymentsResponse>> {
        if (requestParameters['createWorkerPaymentsRequest'] == null) {
            throw new runtime.RequiredError(
                'createWorkerPaymentsRequest',
                'Required parameter "createWorkerPaymentsRequest" was null or undefined when calling createWorkerPayments().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/worker-payments`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateWorkerPaymentsRequestToJSON(requestParameters['createWorkerPaymentsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkerPaymentsResponseFromJSON(jsonValue));
    }

    /**
     * Create a new workerPayments
     */
    async createWorkerPayments(requestParameters: CreateWorkerPaymentsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkerPaymentsResponse> {
        const response = await this.createWorkerPaymentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all workerPaymentss
     */
    async findAllWorkerPaymentsRaw(requestParameters: FindAllWorkerPaymentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkerPaymentsPaginationResponse>> {
        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['workerId'] != null) {
            queryParameters['workerId'] = requestParameters['workerId'];
        }

        if (requestParameters['serviceSheetId'] != null) {
            queryParameters['serviceSheetId'] = requestParameters['serviceSheetId'];
        }

        if (requestParameters['sortOrder'] != null) {
            queryParameters['sortOrder'] = requestParameters['sortOrder'];
        }

        if (requestParameters['sortField'] != null) {
            queryParameters['sortField'] = requestParameters['sortField'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/worker-payments`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkerPaymentsPaginationResponseFromJSON(jsonValue));
    }

    /**
     * Get all workerPaymentss
     */
    async findAllWorkerPayments(requestParameters: FindAllWorkerPaymentsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkerPaymentsPaginationResponse> {
        const response = await this.findAllWorkerPaymentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get workerPayments by id
     */
    async findOneWorkerPaymentsRaw(requestParameters: FindOneWorkerPaymentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkerPaymentsResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling findOneWorkerPayments().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/worker-payments/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkerPaymentsResponseFromJSON(jsonValue));
    }

    /**
     * Get workerPayments by id
     */
    async findOneWorkerPayments(requestParameters: FindOneWorkerPaymentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkerPaymentsResponse> {
        const response = await this.findOneWorkerPaymentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async removeWorkerPaymentsRaw(requestParameters: RemoveWorkerPaymentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling removeWorkerPayments().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/worker-payments/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async removeWorkerPayments(requestParameters: RemoveWorkerPaymentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.removeWorkerPaymentsRaw(requestParameters, initOverrides);
    }

    /**
     */
    async updateWorkerPaymentsRaw(requestParameters: UpdateWorkerPaymentsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkerPaymentsResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateWorkerPayments().'
            );
        }

        if (requestParameters['updateWorkerPaymentsRequest'] == null) {
            throw new runtime.RequiredError(
                'updateWorkerPaymentsRequest',
                'Required parameter "updateWorkerPaymentsRequest" was null or undefined when calling updateWorkerPayments().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/worker-payments/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateWorkerPaymentsRequestToJSON(requestParameters['updateWorkerPaymentsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkerPaymentsResponseFromJSON(jsonValue));
    }

    /**
     */
    async updateWorkerPayments(requestParameters: UpdateWorkerPaymentsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkerPaymentsResponse> {
        const response = await this.updateWorkerPaymentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const FindAllWorkerPaymentsSortOrderEnum = {
    Asc: 'ASC',
    Desc: 'DESC'
} as const;
export type FindAllWorkerPaymentsSortOrderEnum = typeof FindAllWorkerPaymentsSortOrderEnum[keyof typeof FindAllWorkerPaymentsSortOrderEnum];
/**
 * @export
 */
export const FindAllWorkerPaymentsSortFieldEnum = {
    Id: 'id',
    WorkerId: 'workerId',
    ServiceSheetId: 'serviceSheetId',
    TotalPayment: 'totalPayment',
    PaymentDate: 'paymentDate',
    IsExtra: 'isExtra',
    CreatedAt: 'createdAt',
    UpdatedAt: 'updatedAt'
} as const;
export type FindAllWorkerPaymentsSortFieldEnum = typeof FindAllWorkerPaymentsSortFieldEnum[keyof typeof FindAllWorkerPaymentsSortFieldEnum];

/* tslint:disable */
/* eslint-disable */
/**
 * Smart Power Electric API
 * Smart Power Electric API Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface UserResponse
 */
export interface UserResponse {
    /**
     * Id of the user
     * @type {string}
     * @memberof UserResponse
     */
    id: string;
    /**
     * Worker id of the user
     * @type {string}
     * @memberof UserResponse
     */
    username: string;
    /**
     * Worker id of the user
     * @type {string}
     * @memberof UserResponse
     */
    fullname: string;
    /**
     * Rate of the user
     * @type {string}
     * @memberof UserResponse
     */
    password: string;
    /**
     * Effective date of the user
     * @type {string}
     * @memberof UserResponse
     */
    status: UserResponseStatusEnum;
    /**
     * Is the user enabled
     * @type {boolean}
     * @memberof UserResponse
     */
    isEnabled: boolean;
    /**
     * Creation date of the user
     * @type {Date}
     * @memberof UserResponse
     */
    createdAt: Date;
    /**
     * Update date of the user
     * @type {Date}
     * @memberof UserResponse
     */
    updatedAt: Date | null;
    /**
     * Deletion date of the user
     * @type {Date}
     * @memberof UserResponse
     */
    deletedAt: Date | null;
}


/**
 * @export
 */
export const UserResponseStatusEnum = {
    Active: 'active',
    Inactive: 'inactive',
    Pending: 'pending',
    Blocked: 'blocked'
} as const;
export type UserResponseStatusEnum = typeof UserResponseStatusEnum[keyof typeof UserResponseStatusEnum];


/**
 * Check if a given object implements the UserResponse interface.
 */
export function instanceOfUserResponse(value: object): value is UserResponse {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('username' in value) || value['username'] === undefined) return false;
    if (!('fullname' in value) || value['fullname'] === undefined) return false;
    if (!('password' in value) || value['password'] === undefined) return false;
    if (!('status' in value) || value['status'] === undefined) return false;
    if (!('isEnabled' in value) || value['isEnabled'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('updatedAt' in value) || value['updatedAt'] === undefined) return false;
    if (!('deletedAt' in value) || value['deletedAt'] === undefined) return false;
    return true;
}

export function UserResponseFromJSON(json: any): UserResponse {
    return UserResponseFromJSONTyped(json, false);
}

export function UserResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): UserResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'username': json['username'],
        'fullname': json['fullname'],
        'password': json['password'],
        'status': json['status'],
        'isEnabled': json['isEnabled'],
        'createdAt': json['createdAt'],
        'updatedAt': json['updatedAt'],
        'deletedAt': json['deletedAt'],
    };
}

  export function UserResponseToJSON(json: any): UserResponse {
      return UserResponseToJSONTyped(json, false);
  }

  export function UserResponseToJSONTyped(value?: UserResponse | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'username': value['username'],
        'fullname': value['fullname'],
        'password': value['password'],
        'status': value['status'],
        'isEnabled': value['isEnabled'],
        'createdAt': value['createdAt'],
        'updatedAt': value['updatedAt'],
        'deletedAt': value['deletedAt'],
    };
}


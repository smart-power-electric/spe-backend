services:
  # spe_backend:
  #   build:
  #     context: ../.
  #     dockerfile: ./Dockerfile
  #   ports:
  #     - ${PORT} # Ensure the port mapping is correct
  #   deploy:
  #     replicas: 1
  #   environment:
  #     - NODE_ENV=production
  #     - HOST=${HOST}
  #     - PORT=${PORT}
  #     - DATABASE_HOST=postgres
  #     - DATABASE_PORT=${DATABASE_PORT}
  #     - DATABASE_USER=${DATABASE_USER}
  #     - DATABASE_PASSWORD=${DATABASE_PASSWORD}
  #     - DATABASE_NAME=${DATABASE_NAME}
  #     - DATABASE_SSL_MODE=${DATABASE_SSL_MODE}
  #     - AUTOMIGRATE=${AUTOMIGRATE}
  #     - JWT_ACCESS_SECRET=${JWT_ACCESS_SECRET}
  #     - JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET}
  #     - JWT_EXPIRATION_TOKEN=${JWT_EXPIRATION_TOKEN}
  #     - JWT_EXPIRATION_REFRESH_TOKEN=${JWT_EXPIRATION_REFRESH_TOKEN}
  #   networks:
  #     - app-network
  #   depends_on:
  #     - postgres
  #   restart: unless-stopped

  postgres:
    image: postgres:latest
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DATABASE_NAME}
      POSTGRES_USER: ${DATABASE_USER}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin"]
      start_period: 1m
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "${DATABASE_PORT}:5432"
    volumes:
      - ./pg_data:/var/lib/postgresql/data
    networks:
          - app-network

volumes:
  postgres_data:
    driver: local
networks:
  app-network:
    driver: bridge